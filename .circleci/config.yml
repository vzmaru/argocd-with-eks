version: 2.1
orbs:
  aws-cli: circleci/aws-cli@3.1
  aws-eks: circleci/aws-eks@2.2.0
  kubernetes: circleci/kubernetes@1.3

jobs:
  create-eks-cluster:
    docker:
      - image: 'cimg/python:3.10'
    resource_class: small
    parameters:
      cluster-name:
        description: |
          Name of the EKS cluster
        type: string
    steps:
      - aws-eks/create-cluster:
          aws-region: us-east-1 
          cluster-name: << parameters.cluster-name >>
          node-type: t3.medium 
          nodes: 5 
          nodes-max: 10 
          nodes-min: 3 
          nodegroup-name: standard-workers 
          show-eksctl-command: true
      - aws-cli/setup:
          profile-name: default
      - run:
          command: |
            eksctl utils associate-iam-oidc-provider --region=us-east-1 --cluster=<< parameters.cluster-name >> --approve
            eksctl create iamserviceaccount --name ebs-csi-controller-sa --namespace kube-system --cluster << parameters.cluster-name >> --attach-policy-arn arn:aws:iam::aws:policy/service-role/AmazonEBSCSIDriverPolicy --approve --role-only --role-name AmazonEKS_EBS_CSI_DriverRole
            eksctl create addon --name aws-ebs-csi-driver --cluster dev --service-account-role-arn `aws iam get-role --role-name AmazonEKS_EBS_CSI_DriverRole --query Role.Arn --output text` --force
          name: Add EBS CSI driver
  install-argocd:
    docker:
      - image: 'cimg/python:3.10'
    resource_class: small
    parameters:
      cluster-name:
        description: |
          Name of the EKS cluster
        type: string
    steps:
      - kubernetes/install:
          kubectl-version: v1.26.1
      - aws-eks/update-kubeconfig-with-authenticator:
          cluster-name: << parameters.cluster-name >>
      - run:
          command: |
            kubectl create namespace argocd --dry-run=client -o yaml | kubectl apply -f -
            kubectl apply -n argocd -f https://raw.githubusercontent.com/argoproj/argo-cd/stable/manifests/install.yaml
            kubectl patch svc argocd-server -n argocd -p '{"spec": {"type": "LoadBalancer"}}'
            kubectl get svc argocd-server -n argocd -o jsonpath='{.status.loadBalancer.ingress[].hostname}'
          name: Install ArgoCD
workflows:
  argocd-deployment:
    jobs:
      - create-eks-cluster:
          cluster-name: dev
          context:
            - aws
      - install-argocd:
          cluster-name: dev
          context:
            - aws
          requires:
            - create-eks-cluster
